# docker-compose.yml
version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: rss-postgres
    environment:
      POSTGRES_DB: rss_app
      POSTGRES_USER: rss_user
      POSTGRES_PASSWORD: rss_password_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rss_user -d rss_app"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rss-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: rss-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rss-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rss-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://rss_user:rss_password_2025@postgres:5432/rss_app?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-2025
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production-2025
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      GITHUB_CLIENT_ID: your-github-client-id
      GITHUB_CLIENT_SECRET: your-github-client-secret
      FRONTEND_URL: http://localhost:3000
      BACKEND_URL: http://localhost:5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rss-network
    command: npm run dev

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rss-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_SOCKET_URL: http://localhost:5000
      REACT_APP_GOOGLE_CLIENT_ID: your-google-client-id
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - rss-network
    command: npm start

volumes:
  postgres_data:
  redis_data:

networks:
  rss-network:
    driver: bridge